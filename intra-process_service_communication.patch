diff --git a/clients/roscpp/CMakeLists.txt b/clients/roscpp/CMakeLists.txt
index 6331029..ad8ebc6 100644
--- a/clients/roscpp/CMakeLists.txt
+++ b/clients/roscpp/CMakeLists.txt
@@ -118,6 +118,7 @@ add_library(roscpp
   src/libros/poll_set.cpp
   src/libros/service.cpp
   src/libros/this_node.cpp
+  src/libros/transport/transport_intraprocess.cpp
   )
 
 add_dependencies(roscpp ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})
diff --git a/clients/roscpp/include/ros/connection_manager.h b/clients/roscpp/include/ros/connection_manager.h
index 3778a8c..13fc013 100644
--- a/clients/roscpp/include/ros/connection_manager.h
+++ b/clients/roscpp/include/ros/connection_manager.h
@@ -79,7 +79,10 @@ private:
   // thread may still be using them (or more likely their transport)
   void removeDroppedConnections();
 
+public: /* We need this function to bind for the intra-process transport */
   bool onConnectionHeaderReceived(const ConnectionPtr& conn, const Header& header);
+
+private:
   void tcprosAcceptConnection(const TransportTCPPtr& transport);
 
   PollManagerPtr poll_manager_;
diff --git a/clients/roscpp/include/ros/service_client_link.h b/clients/roscpp/include/ros/service_client_link.h
index 370e8bd..7f1156f 100644
--- a/clients/roscpp/include/ros/service_client_link.h
+++ b/clients/roscpp/include/ros/service_client_link.h
@@ -58,7 +58,7 @@ public:
   //
   bool initialize(const ConnectionPtr& connection);
   bool handleHeader(const Header& header);
-
+  
   /**
    * \brief Writes a response to the current request.
    * \param ok Whether the callback was successful or not
diff --git a/clients/roscpp/include/ros/service_publication.h b/clients/roscpp/include/ros/service_publication.h
index ff4f8b4..81257af 100644
--- a/clients/roscpp/include/ros/service_publication.h
+++ b/clients/roscpp/include/ros/service_publication.h
@@ -79,7 +79,7 @@ public:
    * \brief Removes a service link from our list
    */
   void removeServiceClientLink(const ServiceClientLinkPtr& link);
-
+  
   /**
    * \brief Terminate this service server
    */
diff --git a/clients/roscpp/include/ros/transport/transport_intraprocess.h b/clients/roscpp/include/ros/transport/transport_intraprocess.h
new file mode 100644
index 0000000..ee84a4f
--- /dev/null
+++ b/clients/roscpp/include/ros/transport/transport_intraprocess.h
@@ -0,0 +1,57 @@
+// I'm not pretty sure whether I should place a copyright here or not.
+
+#ifndef ROSCPP_TRANSPORT_INTRAPROCESS_H
+#define ROSCPP_TRANSPORT_INTRAPROCESS_H
+
+#include "ros/common.h"
+#include "ros/transport/transport.h"
+
+#include <boost/thread/mutex.hpp>
+#include <boost/thread/condition_variable.hpp>
+#include <deque>
+
+namespace ros
+{
+
+class TransportIntraProcess;
+typedef boost::shared_ptr<TransportIntraProcess> TransportIntraProcessPtr;
+
+class ROSCPP_DECL TransportIntraProcess : public Transport
+{
+public:
+  TransportIntraProcess();
+  virtual ~TransportIntraProcess();
+
+  void setInterlocutor(TransportIntraProcessPtr& interlocutor);
+
+  uint32_t accept(uint8_t* buffer, uint32_t size);
+  
+  // overrides from Transport
+  virtual int32_t read(uint8_t* buffer, uint32_t size);
+  virtual int32_t write(uint8_t* buffer, uint32_t size);
+
+  virtual void enableWrite();
+  virtual void disableWrite();
+  virtual void enableRead();
+  virtual void disableRead();
+
+  virtual void close();
+
+  virtual std::string getTransportInfo();
+
+  virtual const char* getType() { return "intra-process"; }
+  
+private:
+
+  boost::mutex configuration_mutex_;
+  TransportIntraProcessPtr interlocutor_;
+  bool write_enabled_;
+  bool read_enabled_;
+
+  boost::mutex buffer_mutex_;
+  std::deque<uint8_t> buffer_;
+};
+ 
+}
+
+#endif //ROSCPP_TRANSPORT_INTRAPROCESS_H
diff --git a/clients/roscpp/src/libros/connection.cpp b/clients/roscpp/src/libros/connection.cpp
index cb92aa7..e6ec801 100644
--- a/clients/roscpp/src/libros/connection.cpp
+++ b/clients/roscpp/src/libros/connection.cpp
@@ -417,6 +417,7 @@ void Connection::onHeaderRead(const ConnectionPtr& conn, const boost::shared_arr
   }
   else
   {
+    M_stringPtr recv = header_.getValues();
     std::string error_val;
     if (header_.getValue("error", error_val))
     {
diff --git a/clients/roscpp/src/libros/service_client_link.cpp b/clients/roscpp/src/libros/service_client_link.cpp
index 830b4ed..3560ce2 100644
--- a/clients/roscpp/src/libros/service_client_link.cpp
+++ b/clients/roscpp/src/libros/service_client_link.cpp
@@ -190,7 +190,7 @@ void ServiceClientLink::onRequestLength(const ConnectionPtr& conn, const boost::
 
   if (len > 1000000000)
   {
-    ROS_ERROR("a message of over a gigabyte was " \
+      ROS_ERROR("a message of over a gigabyte was "       \
                 "predicted in tcpros. that seems highly " \
                 "unlikely, so I'll assume protocol " \
                 "synchronization is lost.");
diff --git a/clients/roscpp/src/libros/service_manager.cpp b/clients/roscpp/src/libros/service_manager.cpp
index 1f1e94a..2284626 100644
--- a/clients/roscpp/src/libros/service_manager.cpp
+++ b/clients/roscpp/src/libros/service_manager.cpp
@@ -38,6 +38,7 @@
 #include "ros/master.h"
 #include "ros/transport/transport_tcp.h"
 #include "ros/transport/transport_udp.h"
+#include "ros/transport/transport_intraprocess.h"
 #include "ros/init.h"
 #include "ros/connection.h"
 #include "ros/file_log.h"
@@ -252,16 +253,41 @@ ServiceServerLinkPtr ServiceManager::createServiceServerLink(const std::string&
     return ServiceServerLinkPtr();
   }
 
-  TransportTCPPtr transport(boost::make_shared<TransportTCP>(&poll_manager_->getPollSet()));
+  if (!isServiceAdvertised(service)) {
+    TransportTCPPtr transport(boost::make_shared<TransportTCP>(&poll_manager_->getPollSet()));
 
-  // Make sure to initialize the connection *before* transport->connect()
-  // is called, otherwise we might miss a connect error (see #434).
-  ConnectionPtr connection(boost::make_shared<Connection>());
-  connection_manager_->addConnection(connection);
-  connection->initialize(transport, false, HeaderReceivedFunc());
+    // Make sure to initialize the connection *before* transport->connect()
+    // is called, otherwise we might miss a connect error (see #434).
+    ConnectionPtr connection(boost::make_shared<Connection>());
+    connection_manager_->addConnection(connection);
+    connection->initialize(transport, false, HeaderReceivedFunc());
+
+    if (transport->connect(serv_host, serv_port))
+    {
+      ServiceServerLinkPtr client(boost::make_shared<ServiceServerLink>(service, persistent, request_md5sum, response_md5sum, header_values));
+
+      {
+        boost::mutex::scoped_lock lock(service_server_links_mutex_);
+        service_server_links_.push_back(client);
+      }
+
+      client->initialize(connection);
+
+      return client;
+    }
+  } else {
+    // Then it is a local connection so the transport will be intra-process
+
+    TransportIntraProcessPtr out_transport(boost::make_shared<TransportIntraProcess>());
+    TransportIntraProcessPtr in_transport(boost::make_shared<TransportIntraProcess>());
+    out_transport->setInterlocutor(in_transport);
+    in_transport->setInterlocutor(out_transport);
+    ConnectionPtr in_connection(boost::make_shared<Connection>());
+    connection_manager_->addConnection(in_connection);
+    ConnectionPtr out_connection(boost::make_shared<Connection>());
+    connection_manager_->addConnection(out_connection);
+    out_connection->initialize(out_transport, false, HeaderReceivedFunc());
 
-  if (transport->connect(serv_host, serv_port))
-  {
     ServiceServerLinkPtr client(boost::make_shared<ServiceServerLink>(service, persistent, request_md5sum, response_md5sum, header_values));
 
     {
@@ -269,8 +295,9 @@ ServiceServerLinkPtr ServiceManager::createServiceServerLink(const std::string&
       service_server_links_.push_back(client);
     }
 
-    client->initialize(connection);
-
+    client->initialize(out_connection);
+    in_connection->initialize(in_transport, true, boost::bind(&ConnectionManager::onConnectionHeaderReceived, connection_manager_.get(), _1, _2));
+    
     return client;
   }
 
diff --git a/clients/roscpp/src/libros/service_publication.cpp b/clients/roscpp/src/libros/service_publication.cpp
index 624ffef..b7bd62c 100644
--- a/clients/roscpp/src/libros/service_publication.cpp
+++ b/clients/roscpp/src/libros/service_publication.cpp
@@ -36,11 +36,14 @@
 #include "ros/service_client_link.h"
 #include "ros/connection.h"
 #include "ros/callback_queue_interface.h"
+#include "ros/transport/transport.h"
 
 #include <boost/bind.hpp>
 
 #include <std_msgs/String.h>
 
+#include <cstring>
+
 namespace ros
 {
 
@@ -158,7 +161,12 @@ private:
 void ServicePublication::processRequest(boost::shared_array<uint8_t> buf, size_t num_bytes, const ServiceClientLinkPtr& link)
 {
   CallbackInterfacePtr cb(boost::make_shared<ServiceCallback>(helper_, buf, num_bytes, link, has_tracked_object_, tracked_object_));
-  callback_queue_->addCallback(cb, (uint64_t)this);
+  if (std::strcmp(link->getConnection()->getTransport()->getType(), "intra-process") == 0) {
+      // Intra-process requests should be answered immediately
+      cb->call();
+  } else {
+      callback_queue_->addCallback(cb, (uint64_t)this);
+  }
 }
 
 void ServicePublication::addServiceClientLink(const ServiceClientLinkPtr& link)
diff --git a/clients/roscpp/src/libros/transport/transport_intraprocess.cpp b/clients/roscpp/src/libros/transport/transport_intraprocess.cpp
new file mode 100644
index 0000000..7a1f5ec
--- /dev/null
+++ b/clients/roscpp/src/libros/transport/transport_intraprocess.cpp
@@ -0,0 +1,124 @@
+// I'm not pretty sure whether I should place a copyright here or not.
+
+#include "ros/transport/transport_intraprocess.h"
+
+#include <algorithm>
+#include <sstream>
+
+namespace ros
+{
+
+TransportIntraProcess::TransportIntraProcess()
+  : interlocutor_(NULL),
+    write_enabled_(false),
+    read_enabled_(true) {}
+
+TransportIntraProcess::~TransportIntraProcess() {}
+
+void TransportIntraProcess::setInterlocutor(TransportIntraProcessPtr& interlocutor)
+{
+  ROS_ASSERT(interlocutor != NULL);
+  {
+    boost::mutex::scoped_lock lock(configuration_mutex_);
+    ROS_ASSERT(interlocutor_ == NULL);
+    interlocutor_ = interlocutor;
+  }
+  enableWrite();
+}
+
+uint32_t TransportIntraProcess::accept(uint8_t* buffer, uint32_t size)
+{
+  bool read_enabled;
+  {
+    boost::mutex::scoped_lock conf_lock(configuration_mutex_);
+    boost::mutex::scoped_lock buf_lock(buffer_mutex_);
+    read_enabled = read_enabled_;
+    std::copy(buffer, buffer + size, std::back_inserter(buffer_));
+  }
+  if (read_enabled && read_cb_)
+      read_cb_(shared_from_this());
+  return size;
+}
+
+int32_t TransportIntraProcess::read(uint8_t* buffer, uint32_t size)
+{
+  {
+    boost::mutex::scoped_lock conf_lock(configuration_mutex_);
+    if (!read_enabled_) {
+      return 0;
+    }
+  }
+
+  boost::mutex::scoped_lock buf_lock(buffer_mutex_);
+  size = std::min(size, (uint32_t)buffer_.size());
+  int32_t ret = size;
+  while (size > 0) {
+    *(buffer++) = buffer_.front();
+    buffer_.pop_front();
+    size--;
+  }
+  return ret;
+}
+
+int32_t TransportIntraProcess::write(uint8_t* buffer, uint32_t size)
+{
+  {
+    boost::mutex::scoped_lock conf_lock(configuration_mutex_);
+    if (!write_enabled_)
+      return 0;
+  }
+
+  // interlocutor should not be NULL if write is enabled
+  ROS_ASSERT(interlocutor_ != NULL);
+  uint32_t ret = interlocutor_->accept(buffer, size);
+  return ret;
+}
+
+void TransportIntraProcess::enableWrite()
+{
+  {
+    boost::mutex::scoped_lock conf_lock(configuration_mutex_);
+    write_enabled_ = true;
+  }
+  if (write_cb_)
+    write_cb_(shared_from_this());
+}
+
+void TransportIntraProcess::disableWrite()
+{
+  boost::mutex::scoped_lock conf_lock(configuration_mutex_);
+  write_enabled_ = false;
+}
+
+void TransportIntraProcess::enableRead()
+{
+  {
+    boost::mutex::scoped_lock conf_lock(configuration_mutex_);
+    read_enabled_ = true;
+  }
+  if (read_cb_)
+    read_cb_(shared_from_this());
+}
+
+void TransportIntraProcess::disableRead()
+{
+  boost::mutex::scoped_lock conf_lock(configuration_mutex_);
+  read_enabled_ = false;
+}
+
+void TransportIntraProcess::close()
+{
+  boost::mutex::scoped_lock conf_lock(configuration_mutex_);
+  read_enabled_ = false;
+  write_enabled_ = false;
+}
+    
+std::string TransportIntraProcess::getTransportInfo()
+{
+  boost::mutex::scoped_lock(configuration_mutex_);
+  std::stringstream str;
+  str << "intraprocess connection with " << interlocutor_;
+  return str.str();
+}
+
+}
